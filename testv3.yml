openapi: 3.0.1
info:
  title: Swagger Petstore
  description: 'This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.6
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore.swagger.io/v2
  - url: http://petstore.swagger.io/v2
security:
  - api_key: []
  - basicAuth: []
  - global: []
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /pet:
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: |-
        Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/enterprise-server@3.0/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.

        You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      operationId: addPet
      parameters:
        - name: userId
          in: path
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to get
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: testId
          in: query
          description: test query
          required: true
          description: test ID
          schema:
            type: integer
        - name: testHeader
          in: header
          description: Tags to filter by
          required: true
          schema:
            type: array
            items:
              type: string
        - name: since
          in: query
          description: 'Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.'
          schema: {}
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          multipart/form-data:
            schema:
              type: object
              properties:
                id: # Part 1 (string value)
                  type: string
                  format: uuid
                address: # Part2 (object)
                  type: object
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                profileImage:
                  type: string
                  format: binary
          image/png:
            schema:
              type: string
              format: binary
              required: true
      responses:
        200:
          description: if returning an existing token
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                title: JSON data
                required:
                  - age
                  - completed_at
                  - name
                type: object
                properties:
                  name:
                    type: string
                    description: The user's full name. This description can be long and should truncate once it reaches the end of the row. If it's not truncating then theres and issue that needs to be fixed. Help!
                  age:
                    multipleOf: 1E+1
                    maximum: 4E+1
                    minimum: 1E+1
                    type: number
                    readOnly: true
                  completed_at:
                    type: string
                    format: date-time
                  avatar:
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    description: Base64-encoded contents of the avatar image
                    format: byte
                  email:
                    minLength: 2
                    type: string
                    format: email
                    default: default@email.com
                  plan:
                    type: object
                  permissions:
                    type: object
                    properties:
                      ids:
                        type: array
                        items:
                          type: integer
            application/xml:
              schema:
                title: XML Data
                required:
                  - age
                  - completed_at
                  - name
                type: object
                properties:
                  name:
                    type: string
                    description: The user's full name. This description can be long and should truncate once it reaches the end of the row. If it's not truncating then theres and issue that needs to be fixed. Help!
            image/jpeg:
              schema:
                title: Image data
                required:
                  - test
                  - completed_at
                  - name
                type: object
                properties:
                  name:
                    type: string
                    description: The user's full name. This description can be long and should truncate once it reaches the end of the row. If it's not truncating then theres and issue that needs to be fixed. Help!
                  test:
                    multipleOf: 1E+1
                    maximum: 4E+1
                    minimum: 1E+1
                    type: number
                    readOnly: true
                  completed_at:
                    type: string
                    format: date-time
                  avatar:
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    description: Base64-encoded contents of the avatar image
                    format: byte
            multipart/form-data:
              schema:
                title: Form data
                required:
                  - age
                  - completed_at
                  - name
                type: object
                properties:
                  name:
                    type: string
                    description: The user's full name. This description can be long and should truncate once it reaches the end of the row. If it's not truncating then theres and issue that needs to be fixed. Help!
                  age:
                    multipleOf: 1E+1
                    maximum: 4E+1
                    minimum: 1E+1
                    type: number
                    readOnly: true
                  completed_at:
                    type: string
                    format: date-time
                  avatar:
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    description: Base64-encoded contents of the avatar image
                    format: byte
        201:
          description: '**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).'
          headers:
            Location:
              schema:
                type: object
                example: https://api.github.com/authorizations/1
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The user ID.
                  username:
                    type: string
                    description: The user name.
            application/xml:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The user ID.
                  username:
                    type: string
                    description: The user name.
            image/jpeg:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The user ID.
                  username:
                    type: string
                    description: The user name.
            multipart/form-data:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The user ID.
                  username:
                    type: string
                    description: The user name.
        304:
          description: if returning an existing token
          content: {}
        401:
          description: if returning an existing token
          content: {}
        403:
          description: if returning an existing token
          content: {}
        422:
          description: if returning an existing token
          content: {}
      deprecated: true
      security:
        - petstore_auth:
            - write:pets
            - read:pets
        - api_key: []
        - basicAuth: []
        - global: []
      x-codegen-request-body-name: body
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore.swagger.io/oauth/authorize
          scopes:
            read:pets: read your pets
            write:pets: modify pets in your account
    basicAuth:
      type: http
      scheme: basic
    global:
      type: apiKey
      name: access_token
      in: query
